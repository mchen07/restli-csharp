@import com.linkedin.restli.datagenerator.csharp.CSharpArray;
@import com.linkedin.restli.datagenerator.csharp.CSharpType;
@import com.linkedin.restli.datagenerator.csharp.CSharpCollectionType;
@import com.linkedin.restli.datagenerator.csharp.CSharpUtil;
@import com.linkedin.restli.datagenerator.csharp.GeneratorConstants;
@import org.rythmengine.RythmEngine;
@args CSharpArray cSharpArray, String sourceName, String targetName, GeneratorConstants.FieldParseType fieldParseType, int level, RythmEngine engine
@{
  CSharpType.NameModifier sourceTypeNameModifier =
    fieldParseType == GeneratorConstants.FieldParseType.FROM_DATAMAP ?
    CSharpType.NameModifier.DATAMAP_PARSE : CSharpType.NameModifier.DEEP_MUTABLE;
}
foreach (@cSharpArray.getElementType().getName(sourceTypeNameModifier) @(sourceName + level) in @(sourceName + (level-1)))
{
  @cSharpArray.getElementType().getName(CSharpType.NameModifier.MUTABLE) result@(level)@if (cSharpArray.getElementType() instanceof CSharpCollectionType){ = new @(cSharpArray.getElementType().getName(CSharpType.NameModifier.MUTABLE))()};
  @CSharpUtil.invokeRythmTemplate("record_field_parse", engine, cSharpArray.getElementType(), sourceName, targetName, fieldParseType, level+1).restli_addIndent(2)
  result@(level - 1).Add(result@(level));
}