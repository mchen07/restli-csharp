@import com.linkedin.restli.datagenerator.csharp.CSharpUnion;
@import com.linkedin.restli.datagenerator.csharp.CSharpType;
@import com.linkedin.restli.datagenerator.csharp.CSharpCollectionType;
@import com.linkedin.restli.datagenerator.csharp.CSharpUtil;
@import com.linkedin.restli.datagenerator.csharp.CSharpUnion.Member;
@import org.rythmengine.RythmEngine;
@args CSharpUnion cSharpUnion, RythmEngine engine
@{
  boolean hasMembers = !cSharpUnion.getMembers().entrySet().isEmpty();
  Set<Map.Entry<String, CSharpUnion.Member>> memberEntrySet = cSharpUnion.getMembers().entrySet();
}
public class @cSharpUnion.getName() : UnionTemplate
{
@for (Map.Entry entry : memberEntrySet) {
  public @(((Member) entry.getValue()).type.getName(CSharpType.NameModifier.NULLABLE)) as@(entry.getKey().capFirst()) { get; }
}
@if (hasMembers) {
  public Mode? dataMode { get; }

  public enum Mode
  {
@for (Map.Entry entry : memberEntrySet) {
    @(entry.getKey().capFirst())@if (!entry_isLast) {,}
}
  }
}

  public @(cSharpUnion.getName())(Dictionary<string, object> dataMap)
  {
@if (hasMembers) {
    foreach (KeyValuePair<string, object> dataPair in dataMap)
    {
@for (Map.Entry entry : memberEntrySet) {
      if (dataPair.Key.Equals("@(((Member) entry.getValue()).key)"))
      {
@{
  String varName = "as" + CSharpUtil.toCapitalized(entry.getKey());
  CSharpType type = ((Member) entry.getValue()).type;
}
@if (type instanceof CSharpCollectionType) {
        @type.getName(CSharpType.NameModifier.DATAMAP_PARSE) data0 = (@type.getName(CSharpType.NameModifier.DATAMAP_PARSE))dataPair.Value;
        @type.getName(CSharpType.NameModifier.MUTABLE) result0 = new @(type.getName(CSharpType.NameModifier.MUTABLE))();
        @CSharpUtil.invokeRythmTemplate("record_field_parse", engine, type, "data", "result", 1).restli_addIndent(8)
        @varName = result0;
} else {
        @CSharpUtil.invokeRythmTemplate("record_field_parse", engine, type, "dataPair.Value", varName, 1).restli_addIndent(8)
}
        dataMode = Mode.@(entry.getKey().capFirst());
        return;
      }
}
    }
    throw new ArgumentException("Unable to find argument of valid type in union constructor: @(cSharpUnion.getName())");
}
  }

@for (Map.Entry entry : memberEntrySet) {

  public @(cSharpUnion.getName())(@(entry.restli_getMemberListEntryType()) value)
  {
    as@(entry.getKey().capFirst()) = value;
    dataMode = Mode.@(entry.getKey().capFirst());
  }
}
}