@import com.linkedin.restli.datagenerator.csharp.CSharpRecord;
@import com.linkedin.restli.datagenerator.csharp.CSharpUnion;
@import com.linkedin.restli.datagenerator.csharp.CSharpType;
@import com.linkedin.restli.datagenerator.csharp.CSharpComplexType;
@import com.linkedin.restli.datagenerator.csharp.CSharpCollectionType;
@import com.linkedin.restli.datagenerator.csharp.CSharpRecord.Field;
@import com.linkedin.restli.datagenerator.csharp.CSharpRythmGenerator;
@import com.linkedin.restli.datagenerator.csharp.CSharpUtil;
@import com.linkedin.restli.datagenerator.csharp.GeneratorConstants;
@import org.rythmengine.RythmEngine
@args CSharpRecord cSharpRecord, CSharpRythmGenerator generator, RythmEngine engine
using System;
using System.Collections.Generic;
using System.Linq;

using restlicsharpdata.restlidata;

// DO NOT EDIT - THIS FILE IS GENERATED BY restli-csharp@cSharpRecord.restli_generatedFrom()

namespace @cSharpRecord.getNamespace()
{
  @cSharpRecord.getDoc().restli_classComment().restli_addIndent(2)
  public class @cSharpRecord.getName() : RecordTemplate
  {
@for (Field field : cSharpRecord.getFields()) {
@if (field.getDoc()) {
    @field.getDoc().restli_comment()
}
    public @(field.getTypeString()) @(field.getName()) { get; }
    public bool @(field.getIndicatorName()) { get; }
}

    public @(cSharpRecord.getName())(Dictionary<string, object> data)
    {
      object value;
@for (Field field : cSharpRecord.getFields()) {
      // Retrieve data for @field.getName()
      if (data.TryGetValue("@field.getSchemaFieldName()", out value))
      {
@if (field.getType() instanceof CSharpCollectionType) {
        //if (value is @field.getType().getName(CSharpType.NameModifier.TYPED_DATAMAP))
        //{
        //  @field.getType().getName(CSharpType.NameModifier.TYPED_DATAMAP) typeSafe = (@field.getType().getName(CSharpType.NameModifier.TYPED_DATAMAP))value;
        //  @field.getName() = @(field.getType().coerceFromDataMapExpression("typeSafe"));
        //}
        //else
        //{
          @field.getType().getName(CSharpType.NameModifier.GENERIC_DATAMAP) data0 = (@field.getType().getName(CSharpType.NameModifier.GENERIC_DATAMAP))value;
          @field.getType().getName(CSharpType.NameModifier.MUTABLE_SHALLOW) result0 = new @(field.getType().getName(CSharpType.NameModifier.MUTABLE_SHALLOW))();
          @CSharpUtil.invokeRythmTemplate("record_field_parse", engine, field.getType(), "data", "result", GeneratorConstants.FieldParseType.FROM_DATAMAP, 1).restli_addIndent(10)
          @field.getName() = result0;
        //}

} else {
        @CSharpUtil.invokeRythmTemplate("record_field_parse", engine, field.getType(), "value", field.getName(), GeneratorConstants.FieldParseType.FROM_DATAMAP, 1).restli_addIndent(8)
}
        @field.getIndicatorName() = true;
      }
      else
      {
@if (field.hasDefaultValue()) {
        @field.getName() = @field.getDefaultValueLiteral();
}
        @field.getIndicatorName() = false;
      }
}
    }

    public @(cSharpRecord.getName())(@(cSharpRecord.getName())Builder builder)
    {
@for (Field field : cSharpRecord.getFields()) {
      // Retrieve data for @field.getName()
      if (builder.@(field.getName()) != null)
      {
@if (field.getType() instanceof CSharpCollectionType) {
        @field.getType().getName(CSharpType.NameModifier.MUTABLE) data0 = builder.@(field.getName());
        @field.getType().getName(CSharpType.NameModifier.MUTABLE_SHALLOW) result0 = new @(field.getType().getName(CSharpType.NameModifier.MUTABLE_SHALLOW))();
        @CSharpUtil.invokeRythmTemplate("record_field_parse", engine, field.getType(), "data", "result", GeneratorConstants.FieldParseType.FROM_BUILDER, 1).restli_addIndent(8)
        @field.getName() = result0;
} else {
        @CSharpUtil.invokeRythmTemplate("record_field_parse", engine, field.getType(), "builder." + field.getName(), field.getName(), GeneratorConstants.FieldParseType.FROM_BUILDER, 1).restli_addIndent(8)
}
        @field.getIndicatorName() = true;
      }
      else
      {
@if (field.hasDefaultValue()) {
        @field.getName() = @field.getDefaultValueLiteral();
} else if(!field.isOptional()) {
        throw new ArgumentException("Required field with no default must be included in builder: @field.getName()");
}
@if (field.isOptional() || field.hasDefaultValue()) {
        @field.getIndicatorName() = false;
}
      }
}
    }

    public override Dictionary<string, object> Data()
    {
      Dictionary<string, object> dataMap = new Dictionary<string, object>();
@for (Field field : cSharpRecord.getFields()) {
      if (@field.getIndicatorName())
        dataMap.Add("@(field.getSchemaFieldName())", @(field.getName())@(field.getType().coerceToDataMapExpression()));
}
      return dataMap;
    }

@for (CSharpUnion cSharpUnion : cSharpRecord.getUnnamedUnions()) {
    @CSharpUtil.invokeRythmTemplate("inner_class_union", engine, cSharpUnion).restli_addIndent(4)
}
  }

  public class @(cSharpRecord.getName())Builder
  {
@for (Field field : cSharpRecord.getFields()) {
    public @(field.getTypeString(CSharpType.NameModifier.BUILDER_NULLABLE)) @(field.getName()) { get; set; }
}

    public @cSharpRecord.getName() Build()
    {
      return new @(cSharpRecord.getName())(this);
    }
  }
}
