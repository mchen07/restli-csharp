@import com.linkedin.data.schema.RecordDataSchema.Field
@args String className
@args String doc
@args List<Field> fields
using System.Collections.Generic;
using System;

@* TODO: Builder class for record data model, namespaces, defaults, float literals, ensure read only models. *@

// DO NOT EDIT - THIS FILE IS GENERATED BY restli-csharp

namespace @className
{

    @doc.restli_comment()
  public class @className
  {
    @for (Field field : fields) {
    @if (field.getDoc()) {
@field.getDoc().restli_comment()
    }
    public @(field.restli_getType()) @(field.getName().capFirst()) { get; }
    @if (field.getDefault() != null) {
    public bool Has@(field.getName().capFirst()) { get; }
    }
    }

    public @(className)(Dictionary<string, object> data)
    {
      object value;
      bool status;
      @for (Field field : fields) {
      // Retrieve data for @field.getName()
      status = data.TryGetValue("@field.getName()", out value);
      if (status)
      {
        @if (field.getDefault() != null) {
        Has@field.getName().capFirst() = true;
        }
        @field.getName().capFirst() = (@field.restli_getType())value;
      }
      @if (field.getDefault() != null) {
      else
      {
        @field.getName().capFirst() = (@field.restli_getType())@field.getDefault();
        Has@field.getName().capFirst() = false;
      }}
      }
    }

    public @(className)(Builder builder)
    {
      @for (Field field : fields) {
      // Retrieve data for @field.getName()
      if (builder.@(field.getName().capFirst()) != null)
      {
        @if (field.getDefault() != null) {
        Has@field.getName().capFirst() = true;
        }
        @field.getName().capFirst() = (@field.restli_getType())builder.@(field.getName().capFirst());
      }
      @if (field.getDefault() != null) {
      else
      {
        @field.getName().capFirst() = (@field.restli_getType())@field.getDefault();
        Has@field.getName().capFirst() = false;
      }} else if(!field.getOptional()) {
      else
      {
        throw new System.ArgumentNullException("Required field with no default must be included in builder: @field.getName()");
      }
      }
      }
    }
  }

  public class Builder
  {
    @for (Field field : fields) {
    public @(field.restli_getNullableType()) @(field.getName().capFirst()) { get; set; }
    }

    public @className build()
    {
      return new @(className)(this);
    }
  }
}