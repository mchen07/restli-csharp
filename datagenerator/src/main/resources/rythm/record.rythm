@import com.linkedin.restli.datagenerator.csharp.CSharpRecord;
@import com.linkedin.restli.datagenerator.csharp.CSharpUnion;
@import com.linkedin.restli.datagenerator.csharp.CSharpType;
@import com.linkedin.restli.datagenerator.csharp.CSharpCollectionType;
@import com.linkedin.restli.datagenerator.csharp.CSharpRecord.Field;
@import com.linkedin.restli.datagenerator.csharp.CSharpRythmGenerator;
@import com.linkedin.restli.datagenerator.csharp.CSharpUtil;
@import org.rythmengine.RythmEngine
@args CSharpRecord cSharpRecord, CSharpRythmGenerator generator, RythmEngine engine
using System.Collections.Generic;
using System;
using restlicsharpdata.restlidata;

// DO NOT EDIT - THIS FILE IS GENERATED BY restli-csharp@cSharpRecord.restli_generatedFrom()

namespace @cSharpRecord.getNamespace()
{
  @cSharpRecord.getDoc().restli_comment().restli_addIndent(2)
  public class @cSharpRecord.getName() : RecordTemplate
  {
@for (Field field : cSharpRecord.getFields()) {
@if (field.getDoc()) {
    @field.getDoc().restli_comment()
}
    // @field.getOptionalityComment()
    public @(field.getTypeString()) @(field.getName()) { get; }
@if (field.hasDefaultValue()) {
    public bool has@(field.getName().capFirst()) { get; }
}
}

    public @(cSharpRecord.getName())(Dictionary<string, object> data)
    {
      object value;
@for (Field field : cSharpRecord.getFields()) {
      // Retrieve data for @field.getName()
      if (data.TryGetValue("@field.getName()", out value))
      {
@if (field.getType() instanceof CSharpCollectionType) {
        @field.getType().getName(CSharpType.NameModifier.DATAMAP_PARSE) data0 = (@field.getType().getName(CSharpType.NameModifier.DATAMAP_PARSE))value;
        @field.getType().getName(CSharpType.NameModifier.MUTABLE) result0 = new @(field.getType().getName(CSharpType.NameModifier.MUTABLE))();
        @CSharpUtil.invokeRythmTemplate("record_field_parse", engine, field.getType(), "data", "result", 1).restli_addIndent(8)
        @field.getName() = result0;
} else {
        @CSharpUtil.invokeRythmTemplate("record_field_parse", engine, field.getType(), "value", field.getName(), 1).restli_addIndent(8)
}
@if (field.hasDefaultValue()) {
        has@field.getName().capFirst() = true;
}
      }
@if (field.hasDefaultValue()) {
      else
      {
        @field.getName() = @field.getDefaultValueLiteral();
        has@field.getName().capFirst() = false;
      }
}
}
    }

    public @(cSharpRecord.getName())(@(cSharpRecord.getName())Builder builder)
    {
@for (Field field : cSharpRecord.getFields()) {
      // Retrieve data for @field.getName()
      if (builder.@(field.getName()) != null)
      {
        @field.getName() = (@field.getTypeString())builder.@(field.getName());
@if (field.hasDefaultValue()) {
        has@field.getName().capFirst() = true;
}
      }
@if (field.hasDefaultValue()) {
      else
      {
        @field.getName() = @field.getDefaultValueLiteral();
        has@field.getName().capFirst() = false;
      }
} else if(!field.isOptional()) {
      else
      {
        throw new System.ArgumentNullException("Required field with no default must be included in builder: @field.getName()");
      }
}
}
    }

@for (CSharpUnion cSharpUnion : cSharpRecord.getUnnamedUnions()) {
    @CSharpUtil.invokeRythmTemplate("inner_class_union", engine, cSharpUnion).restli_addIndent(4)
}
  }

  public class @(cSharpRecord.getName())Builder
  {
@for (Field field : cSharpRecord.getFields()) {
    public @(field.getTypeString(CSharpType.NameModifier.IN_BUILDER)) @(field.getName()) { get; set; }
}

    public @cSharpRecord.getName() Build()
    {
      return new @(cSharpRecord.getName())(this);
    }
  }
}