@import com.linkedin.restli.datagenerator.csharp.CSharpRecord;
@import com.linkedin.restli.datagenerator.csharp.CSharpRecord.Field;
@import com.linkedin.restli.datagenerator.csharp.CSharpRythmGenerator;
@args CSharpRecord cSharpRecord
@args CSharpRythmGenerator generator
using System.Collections.Generic;
using System;

@* TODO: Builder class for record data model, namespaces, defaults, float literals, ensure read only models. *@

// DO NOT EDIT - THIS FILE IS GENERATED BY restli-csharp

namespace @cSharpRecord.getNamespace()
{

    @cSharpRecord.getDoc().restli_comment()
  public class @cSharpRecord.getName()
  {
    @for (Field field : cSharpRecord.getFields()) {
    @if (field.getDoc()) {    @field.getDoc().restli_comment()}
    // @field.getOptionalityComment()
    public @(field.getTypeString()) @(field.getVariableName()) { get; }
    @if (field.hasDefaultValue()) {
    public bool Has@(field.getVariableName()) { get; }
    }
    }

    public @(cSharpRecord.getName())(Dictionary<string, object> data)
    {
      object value;
      bool status;
      @for (Field field : cSharpRecord.getFields()) {
      // Retrieve data for @field.getVariableName()
      status = data.TryGetValue("@field.getVariableName()", out value);
      if (status)
      {
        @field.getVariableName() = (@field.getTypeString())value;
        @if (field.hasDefaultValue()) {
        Has@field.getVariableName() = true;
        }
      }
      @if (field.hasDefaultValue()) {
      else
      {
        @field.getVariableName() = @field.getDefaultValueLiteral();
        Has@field.getVariableName() = false;
      }}
      }
    }

    public @(cSharpRecord.getName())(Builder builder)
    {
      @for (Field field : cSharpRecord.getFields()) {
      // Retrieve data for @field.getVariableName()
      if (builder.@(field.getVariableName()) != null)
      {
        @field.getVariableName() = (@field.getTypeString())builder.@(field.getVariableName());
        @if (field.hasDefaultValue()) {
        Has@field.getVariableName() = true;
        }
      }
      @if (field.hasDefaultValue()) {
      else
      {
        @field.getVariableName() = @field.getDefaultValueLiteral();
        Has@field.getVariableName() = false;
      }} else if(!field.isOptional()) {
      else
      {
        throw new System.ArgumentNullException("Required field with no default must be included in builder: @field.getVariableName()");
      }
      }
      }
    }
  }

  public class Builder
  {
    @for (Field field : cSharpRecord.getFields()) {
    public @(field.getTypeString(true)) @(field.getVariableName()) { get; set; }
    }

    public @cSharpRecord.getName() Build()
    {
      return new @(cSharpRecord.getName())(this);
    }
  }
}