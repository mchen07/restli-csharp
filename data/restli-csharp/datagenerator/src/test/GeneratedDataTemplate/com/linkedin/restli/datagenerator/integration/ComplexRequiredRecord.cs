using System.Collections.Generic;
using System;

// DO NOT EDIT - THIS FILE IS GENERATED BY restli-csharp
// Generated from com/linkedin/restli/datagenerator/integration/ComplexRequiredRecord.pdsc

namespace com.linkedin.restli.datagenerator.integration
{
  /// <summary>
  /// Contains fields of all supported complex schema types
  /// Every field is required
  /// </summary>
  public class ComplexRequiredRecord
  {

    // required, has default value
    public TestEnum enumField { get; }
    public bool hasEnumField { get; }

    // required
    public PrimitiveUnion primitiveUnion { get; }


    // required
    public ComplexUnion complexUnion { get; }


    public ComplexRequiredRecord(Dictionary<string, object> data)
    {
      object value;
      // Retrieve data for enumField
      if (data.TryGetValue("enumField", out value))
      {
        enumField = new TestEnum(value);
        hasEnumField = true;
      }
      else
      {
        enumField = "SYMBOL_2";
        hasEnumField = false;
      }
      // Retrieve data for primitiveUnion
      if (data.TryGetValue("primitiveUnion", out value))
      {
        primitiveUnion = new PrimitiveUnion(value);

      }

      // Retrieve data for complexUnion
      if (data.TryGetValue("complexUnion", out value))
      {
        complexUnion = new ComplexUnion(value);

      }

    }

    public ComplexRequiredRecord(ComplexRequiredRecordBuilder builder)
    {
      // Retrieve data for enumField
      if (builder.enumField != null)
      {
        enumField = (TestEnum)builder.enumField;
        hasEnumField = true;
      }
      else
      {
        enumField = "SYMBOL_2";
        hasEnumField = false;
      }
      // Retrieve data for primitiveUnion
      if (builder.primitiveUnion != null)
      {
        primitiveUnion = (PrimitiveUnion)builder.primitiveUnion;

      }
      else
      {
        throw new System.ArgumentNullException("Required field with no default must be included in builder: primitiveUnion");
      }
      // Retrieve data for complexUnion
      if (builder.complexUnion != null)
      {
        complexUnion = (ComplexUnion)builder.complexUnion;

      }
      else
      {
        throw new System.ArgumentNullException("Required field with no default must be included in builder: complexUnion");
      }
    }

    public class ComplexUnion
    {
      public ComplexRequiredRecord asComplexRequiredRecord { get; }
      public TestEnum asTestEnum { get; }
      public Mode? dataMode { get; }
    
      public enum Mode
      {
        ComplexRequiredRecord,
        TestEnum,
        NULL
      }
    
      public ComplexUnion(Dictionary<string, object> dataMap)
      {
        foreach (KeyValuePair<string, object> dataPair in dataMap)
        {
          if (dataPair.Key.Equals("ComplexRequiredRecord"))
          {
            asComplexRequiredRecord = (ComplexRequiredRecord)dataPair.Value;
            dataMode = Mode.ComplexRequiredRecord;
            break;
          }
          if (dataPair.Key.Equals("TestEnum"))
          {
            asTestEnum = (TestEnum)dataPair.Value;
            dataMode = Mode.TestEnum;
            break;
          }
        }
        throw new System.ArgumentNullException("Unable to find argument of valid type in union constructor: ComplexUnion");
      }
    
    
      public ComplexUnion(ComplexRequiredRecord value)
      {
        asComplexRequiredRecord = value;
        dataMode = Mode.ComplexRequiredRecord;
      }
    
      public ComplexUnion(TestEnum value)
      {
        asTestEnum = value;
        dataMode = Mode.TestEnum;
      }
    }
    public class PrimitiveUnion
    {
      public string asString { get; }
      public int? asInt { get; }
      public Mode? dataMode { get; }
    
      public enum Mode
      {
        String,
        Int,
        NULL
      }
    
      public PrimitiveUnion(Dictionary<string, object> dataMap)
      {
        foreach (KeyValuePair<string, object> dataPair in dataMap)
        {
          if (dataPair.Key.Equals("string"))
          {
            asString = (string)dataPair.Value;
            dataMode = Mode.String;
            break;
          }
          if (dataPair.Key.Equals("int"))
          {
            asInt = (int)dataPair.Value;
            dataMode = Mode.Int;
            break;
          }
        }
        throw new System.ArgumentNullException("Unable to find argument of valid type in union constructor: PrimitiveUnion");
      }
    
    
      public PrimitiveUnion(string value)
      {
        asString = value;
        dataMode = Mode.String;
      }
    
      public PrimitiveUnion(int value)
      {
        asInt = value;
        dataMode = Mode.Int;
      }
    }
  }

  public class ComplexRequiredRecordBuilder
  {
    public TestEnum enumField { get; set; }
    public ComplexRequiredRecord.PrimitiveUnion primitiveUnion { get; set; }
    public ComplexRequiredRecord.ComplexUnion complexUnion { get; set; }

    public ComplexRequiredRecord Build()
    {
      return new ComplexRequiredRecord(this);
    }
  }
}