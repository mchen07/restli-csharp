using System.Collections.Generic;
using System;

// DO NOT EDIT - THIS FILE IS GENERATED BY restli-csharp
// Generated from com/linkedin/restli/datagenerator/integration/UnionTest.pdsc

namespace com.linkedin.restli.datagenerator.integration
{
  /// <summary>Test generation of C# bindings for unions</summary>
  public class UnionTest
  {

    // required
    public UnionEmpty unionEmpty { get; }


    // required
    public UnionWithoutNull unionWithoutNull { get; }


    // required
    public UnionWithInline unionWithInline { get; }


    public UnionTest(Dictionary<string, object> data)
    {
      object value;
      // Retrieve data for unionEmpty
      if (data.TryGetValue("unionEmpty", out value))
      {
        unionEmpty = new UnionEmpty(value);

      }

      // Retrieve data for unionWithoutNull
      if (data.TryGetValue("unionWithoutNull", out value))
      {
        unionWithoutNull = new UnionWithoutNull(value);

      }

      // Retrieve data for unionWithInline
      if (data.TryGetValue("unionWithInline", out value))
      {
        unionWithInline = new UnionWithInline(value);

      }

    }

    public UnionTest(UnionTestBuilder builder)
    {
      // Retrieve data for unionEmpty
      if (builder.unionEmpty != null)
      {
        unionEmpty = (UnionEmpty)builder.unionEmpty;

      }
      else
      {
        throw new System.ArgumentNullException("Required field with no default must be included in builder: unionEmpty");
      }
      // Retrieve data for unionWithoutNull
      if (builder.unionWithoutNull != null)
      {
        unionWithoutNull = (UnionWithoutNull)builder.unionWithoutNull;

      }
      else
      {
        throw new System.ArgumentNullException("Required field with no default must be included in builder: unionWithoutNull");
      }
      // Retrieve data for unionWithInline
      if (builder.unionWithInline != null)
      {
        unionWithInline = (UnionWithInline)builder.unionWithInline;

      }
      else
      {
        throw new System.ArgumentNullException("Required field with no default must be included in builder: unionWithInline");
      }
    }

    public class UnionEmpty
    {
      public Mode? dataMode { get; }
    
      public enum Mode
      {
      }
    
      public UnionEmpty(Dictionary<string, object> dataMap)
      {
        foreach (KeyValuePair<string, object> dataPair in dataMap)
        {
        }
      }
    
    }
    public class UnionWithInline
    {
      public IReadOnlyList<string> asArray { get; }
      public float? asFloat { get; }
      public string asBytes { get; }
      public long? asLong { get; }
      public EnumInUnionTest asEnumInUnionTest { get; }
      public string asString { get; }
      public double? asDouble { get; }
      public IReadOnlyDictionary<string, long> asMap { get; }
      public int? asInt { get; }
      public RecordInUnionTest asRecordInUnionTest { get; }
      public Mode? dataMode { get; }
    
      public enum Mode
      {
        Array,
        Float,
        Bytes,
        Long,
        EnumInUnionTest,
        String,
        Double,
        Map,
        Int,
        RecordInUnionTest
      }
    
      public UnionWithInline(Dictionary<string, object> dataMap)
      {
        foreach (KeyValuePair<string, object> dataPair in dataMap)
        {
          if (dataPair.Key.Equals("Array"))
          {
            asArray = (IReadOnlyList<string>)dataPair.Value;
            dataMode = Mode.Array;
            break;
          }
          if (dataPair.Key.Equals("Float"))
          {
            asFloat = (float)dataPair.Value;
            dataMode = Mode.Float;
            break;
          }
          if (dataPair.Key.Equals("Bytes"))
          {
            asBytes = (string)dataPair.Value;
            dataMode = Mode.Bytes;
            break;
          }
          if (dataPair.Key.Equals("Long"))
          {
            asLong = (long)dataPair.Value;
            dataMode = Mode.Long;
            break;
          }
          if (dataPair.Key.Equals("EnumInUnionTest"))
          {
            asEnumInUnionTest = (EnumInUnionTest)dataPair.Value;
            dataMode = Mode.EnumInUnionTest;
            break;
          }
          if (dataPair.Key.Equals("String"))
          {
            asString = (string)dataPair.Value;
            dataMode = Mode.String;
            break;
          }
          if (dataPair.Key.Equals("Double"))
          {
            asDouble = (double)dataPair.Value;
            dataMode = Mode.Double;
            break;
          }
          if (dataPair.Key.Equals("Map"))
          {
            asMap = (IReadOnlyDictionary<string, long>)dataPair.Value;
            dataMode = Mode.Map;
            break;
          }
          if (dataPair.Key.Equals("Int"))
          {
            asInt = (int)dataPair.Value;
            dataMode = Mode.Int;
            break;
          }
          if (dataPair.Key.Equals("RecordInUnionTest"))
          {
            asRecordInUnionTest = (RecordInUnionTest)dataPair.Value;
            dataMode = Mode.RecordInUnionTest;
            break;
          }
        }
      }
    
    
      public UnionWithInline(IReadOnlyList<string> value)
      {
        asArray = value;
        dataMode = Mode.Array;
      }
    
      public UnionWithInline(float value)
      {
        asFloat = value;
        dataMode = Mode.Float;
      }
    
      public UnionWithInline(string value)
      {
        asBytes = value;
        dataMode = Mode.Bytes;
      }
    
      public UnionWithInline(long value)
      {
        asLong = value;
        dataMode = Mode.Long;
      }
    
      public UnionWithInline(EnumInUnionTest value)
      {
        asEnumInUnionTest = value;
        dataMode = Mode.EnumInUnionTest;
      }
    
      public UnionWithInline(string value)
      {
        asString = value;
        dataMode = Mode.String;
      }
    
      public UnionWithInline(double value)
      {
        asDouble = value;
        dataMode = Mode.Double;
      }
    
      public UnionWithInline(IReadOnlyDictionary<string, long> value)
      {
        asMap = value;
        dataMode = Mode.Map;
      }
    
      public UnionWithInline(int value)
      {
        asInt = value;
        dataMode = Mode.Int;
      }
    
      public UnionWithInline(RecordInUnionTest value)
      {
        asRecordInUnionTest = value;
        dataMode = Mode.RecordInUnionTest;
      }
    }
    public class UnionWithoutNull
    {
      public IReadOnlyList<string> asArray { get; }
      public float? asFloat { get; }
      public string asBytes { get; }
      public long? asLong { get; }
      public SimpleRecord asSimpleRecord { get; }
      public TestEnum asTestEnum { get; }
      public string asString { get; }
      public bool? asBoolean { get; }
      public double? asDouble { get; }
      public IReadOnlyDictionary<string, long> asMap { get; }
      public int? asInt { get; }
      public Mode? dataMode { get; }
    
      public enum Mode
      {
        Array,
        Float,
        Bytes,
        Long,
        SimpleRecord,
        TestEnum,
        String,
        Boolean,
        Double,
        Map,
        Int
      }
    
      public UnionWithoutNull(Dictionary<string, object> dataMap)
      {
        foreach (KeyValuePair<string, object> dataPair in dataMap)
        {
          if (dataPair.Key.Equals("Array"))
          {
            asArray = (IReadOnlyList<string>)dataPair.Value;
            dataMode = Mode.Array;
            break;
          }
          if (dataPair.Key.Equals("Float"))
          {
            asFloat = (float)dataPair.Value;
            dataMode = Mode.Float;
            break;
          }
          if (dataPair.Key.Equals("Bytes"))
          {
            asBytes = (string)dataPair.Value;
            dataMode = Mode.Bytes;
            break;
          }
          if (dataPair.Key.Equals("Long"))
          {
            asLong = (long)dataPair.Value;
            dataMode = Mode.Long;
            break;
          }
          if (dataPair.Key.Equals("SimpleRecord"))
          {
            asSimpleRecord = (SimpleRecord)dataPair.Value;
            dataMode = Mode.SimpleRecord;
            break;
          }
          if (dataPair.Key.Equals("TestEnum"))
          {
            asTestEnum = (TestEnum)dataPair.Value;
            dataMode = Mode.TestEnum;
            break;
          }
          if (dataPair.Key.Equals("String"))
          {
            asString = (string)dataPair.Value;
            dataMode = Mode.String;
            break;
          }
          if (dataPair.Key.Equals("Boolean"))
          {
            asBoolean = (bool)dataPair.Value;
            dataMode = Mode.Boolean;
            break;
          }
          if (dataPair.Key.Equals("Double"))
          {
            asDouble = (double)dataPair.Value;
            dataMode = Mode.Double;
            break;
          }
          if (dataPair.Key.Equals("Map"))
          {
            asMap = (IReadOnlyDictionary<string, long>)dataPair.Value;
            dataMode = Mode.Map;
            break;
          }
          if (dataPair.Key.Equals("Int"))
          {
            asInt = (int)dataPair.Value;
            dataMode = Mode.Int;
            break;
          }
        }
      }
    
    
      public UnionWithoutNull(IReadOnlyList<string> value)
      {
        asArray = value;
        dataMode = Mode.Array;
      }
    
      public UnionWithoutNull(float value)
      {
        asFloat = value;
        dataMode = Mode.Float;
      }
    
      public UnionWithoutNull(string value)
      {
        asBytes = value;
        dataMode = Mode.Bytes;
      }
    
      public UnionWithoutNull(long value)
      {
        asLong = value;
        dataMode = Mode.Long;
      }
    
      public UnionWithoutNull(SimpleRecord value)
      {
        asSimpleRecord = value;
        dataMode = Mode.SimpleRecord;
      }
    
      public UnionWithoutNull(TestEnum value)
      {
        asTestEnum = value;
        dataMode = Mode.TestEnum;
      }
    
      public UnionWithoutNull(string value)
      {
        asString = value;
        dataMode = Mode.String;
      }
    
      public UnionWithoutNull(bool value)
      {
        asBoolean = value;
        dataMode = Mode.Boolean;
      }
    
      public UnionWithoutNull(double value)
      {
        asDouble = value;
        dataMode = Mode.Double;
      }
    
      public UnionWithoutNull(IReadOnlyDictionary<string, long> value)
      {
        asMap = value;
        dataMode = Mode.Map;
      }
    
      public UnionWithoutNull(int value)
      {
        asInt = value;
        dataMode = Mode.Int;
      }
    }
  }

  public class UnionTestBuilder
  {
    public UnionTest.UnionEmpty unionEmpty { get; set; }
    public UnionTest.UnionWithoutNull unionWithoutNull { get; set; }
    public UnionTest.UnionWithInline unionWithInline { get; set; }

    public UnionTest Build()
    {
      return new UnionTest(this);
    }
  }
}