using System.Collections.Generic;
using System;

// DO NOT EDIT - THIS FILE IS GENERATED BY restli-csharp
// Generated from com/linkedin/restli/datagenerator/integration/MapTest.pdsc

namespace com.linkedin.restli.datagenerator.integration
{
  /// <summary>Test generation of C# bindings for maps</summary>
  public class MapTest
  {

    // required
    public IReadOnlyDictionary<string, int> intMap { get; }


    // required
    public IReadOnlyDictionary<string, long> longMap { get; }


    // required
    public IReadOnlyDictionary<string, float> floatMap { get; }


    // required
    public IReadOnlyDictionary<string, double> doubleMap { get; }


    // required
    public IReadOnlyDictionary<string, bool> booleanMap { get; }


    // required
    public IReadOnlyDictionary<string, string> stringMap { get; }


    // required
    public IReadOnlyDictionary<string, string> bytesMap { get; }


    // required
    public IReadOnlyDictionary<string, IReadOnlyList<int>> intArrayMap { get; }


    // required
    public IReadOnlyDictionary<string, IReadOnlyList<long>> longArrayMap { get; }


    // required
    public IReadOnlyDictionary<string, IReadOnlyList<float>> floatArrayMap { get; }


    // required
    public IReadOnlyDictionary<string, IReadOnlyList<double>> doubleArrayMap { get; }


    // required
    public IReadOnlyDictionary<string, IReadOnlyList<bool>> booleanArrayMap { get; }


    // required
    public IReadOnlyDictionary<string, IReadOnlyList<string>> stringArrayMap { get; }


    // required
    public IReadOnlyDictionary<string, IReadOnlyList<string>> bytesArrayMap { get; }


    // required
    public IReadOnlyDictionary<string, IReadOnlyDictionary<string, string>> stringMapMap { get; }


    // required
    public IReadOnlyDictionary<string, TestEnum> testEnumMap { get; }


    // required
    public IReadOnlyDictionary<string, EnumInMapTest> enumInlineMap { get; }


    // required
    public IReadOnlyDictionary<string, SimpleRecord> recordMap { get; }


    // required
    public IReadOnlyDictionary<string, RecordInMapTest> recordInlineMap { get; }


    // required
    public IReadOnlyDictionary<string, UnionMap> unionMap { get; }


    public MapTest(Dictionary<string, object> data)
    {
      object value;
      // Retrieve data for intMap
      if (data.TryGetValue("intMap", out value))
      {
        Dictionary<string, int> data0 = (Dictionary<string, int>)value;
        Dictionary<string, int> result0 = new Dictionary<string, int>();
        foreach (KeyValuePair<string, int> data1pair in data0)
        {
          int data1 = data1pair.Value;
          int result1;
          result1 = (int)data1;
          result0.Add(data1pair.Key, result1);
        }
        intMap = result0;

      }

      // Retrieve data for longMap
      if (data.TryGetValue("longMap", out value))
      {
        Dictionary<string, long> data0 = (Dictionary<string, long>)value;
        Dictionary<string, long> result0 = new Dictionary<string, long>();
        foreach (KeyValuePair<string, long> data1pair in data0)
        {
          long data1 = data1pair.Value;
          long result1;
          result1 = (long)data1;
          result0.Add(data1pair.Key, result1);
        }
        longMap = result0;

      }

      // Retrieve data for floatMap
      if (data.TryGetValue("floatMap", out value))
      {
        Dictionary<string, float> data0 = (Dictionary<string, float>)value;
        Dictionary<string, float> result0 = new Dictionary<string, float>();
        foreach (KeyValuePair<string, float> data1pair in data0)
        {
          float data1 = data1pair.Value;
          float result1;
          result1 = (float)data1;
          result0.Add(data1pair.Key, result1);
        }
        floatMap = result0;

      }

      // Retrieve data for doubleMap
      if (data.TryGetValue("doubleMap", out value))
      {
        Dictionary<string, double> data0 = (Dictionary<string, double>)value;
        Dictionary<string, double> result0 = new Dictionary<string, double>();
        foreach (KeyValuePair<string, double> data1pair in data0)
        {
          double data1 = data1pair.Value;
          double result1;
          result1 = (double)data1;
          result0.Add(data1pair.Key, result1);
        }
        doubleMap = result0;

      }

      // Retrieve data for booleanMap
      if (data.TryGetValue("booleanMap", out value))
      {
        Dictionary<string, bool> data0 = (Dictionary<string, bool>)value;
        Dictionary<string, bool> result0 = new Dictionary<string, bool>();
        foreach (KeyValuePair<string, bool> data1pair in data0)
        {
          bool data1 = data1pair.Value;
          bool result1;
          result1 = (bool)data1;
          result0.Add(data1pair.Key, result1);
        }
        booleanMap = result0;

      }

      // Retrieve data for stringMap
      if (data.TryGetValue("stringMap", out value))
      {
        Dictionary<string, string> data0 = (Dictionary<string, string>)value;
        Dictionary<string, string> result0 = new Dictionary<string, string>();
        foreach (KeyValuePair<string, string> data1pair in data0)
        {
          string data1 = data1pair.Value;
          string result1;
          result1 = (string)data1;
          result0.Add(data1pair.Key, result1);
        }
        stringMap = result0;

      }

      // Retrieve data for bytesMap
      if (data.TryGetValue("bytesMap", out value))
      {
        Dictionary<string, string> data0 = (Dictionary<string, string>)value;
        Dictionary<string, string> result0 = new Dictionary<string, string>();
        foreach (KeyValuePair<string, string> data1pair in data0)
        {
          string data1 = data1pair.Value;
          string result1;
          result1 = (string)data1;
          result0.Add(data1pair.Key, result1);
        }
        bytesMap = result0;

      }

      // Retrieve data for intArrayMap
      if (data.TryGetValue("intArrayMap", out value))
      {
        Dictionary<string, List<int>> data0 = (Dictionary<string, List<int>>)value;
        Dictionary<string, IReadOnlyList<int>> result0 = new Dictionary<string, IReadOnlyList<int>>();
        foreach (KeyValuePair<string, List<int>> data1pair in data0)
        {
          List<int> data1 = data1pair.Value;
          List<int> result1 = new List<int>();
          foreach (int data2 in data1)
          {
            int result2;
            result2 = (int)data2;
            result1.Add(result2);
          }
          result0.Add(data1pair.Key, result1);
        }
        intArrayMap = result0;

      }

      // Retrieve data for longArrayMap
      if (data.TryGetValue("longArrayMap", out value))
      {
        Dictionary<string, List<long>> data0 = (Dictionary<string, List<long>>)value;
        Dictionary<string, IReadOnlyList<long>> result0 = new Dictionary<string, IReadOnlyList<long>>();
        foreach (KeyValuePair<string, List<long>> data1pair in data0)
        {
          List<long> data1 = data1pair.Value;
          List<long> result1 = new List<long>();
          foreach (long data2 in data1)
          {
            long result2;
            result2 = (long)data2;
            result1.Add(result2);
          }
          result0.Add(data1pair.Key, result1);
        }
        longArrayMap = result0;

      }

      // Retrieve data for floatArrayMap
      if (data.TryGetValue("floatArrayMap", out value))
      {
        Dictionary<string, List<float>> data0 = (Dictionary<string, List<float>>)value;
        Dictionary<string, IReadOnlyList<float>> result0 = new Dictionary<string, IReadOnlyList<float>>();
        foreach (KeyValuePair<string, List<float>> data1pair in data0)
        {
          List<float> data1 = data1pair.Value;
          List<float> result1 = new List<float>();
          foreach (float data2 in data1)
          {
            float result2;
            result2 = (float)data2;
            result1.Add(result2);
          }
          result0.Add(data1pair.Key, result1);
        }
        floatArrayMap = result0;

      }

      // Retrieve data for doubleArrayMap
      if (data.TryGetValue("doubleArrayMap", out value))
      {
        Dictionary<string, List<double>> data0 = (Dictionary<string, List<double>>)value;
        Dictionary<string, IReadOnlyList<double>> result0 = new Dictionary<string, IReadOnlyList<double>>();
        foreach (KeyValuePair<string, List<double>> data1pair in data0)
        {
          List<double> data1 = data1pair.Value;
          List<double> result1 = new List<double>();
          foreach (double data2 in data1)
          {
            double result2;
            result2 = (double)data2;
            result1.Add(result2);
          }
          result0.Add(data1pair.Key, result1);
        }
        doubleArrayMap = result0;

      }

      // Retrieve data for booleanArrayMap
      if (data.TryGetValue("booleanArrayMap", out value))
      {
        Dictionary<string, List<bool>> data0 = (Dictionary<string, List<bool>>)value;
        Dictionary<string, IReadOnlyList<bool>> result0 = new Dictionary<string, IReadOnlyList<bool>>();
        foreach (KeyValuePair<string, List<bool>> data1pair in data0)
        {
          List<bool> data1 = data1pair.Value;
          List<bool> result1 = new List<bool>();
          foreach (bool data2 in data1)
          {
            bool result2;
            result2 = (bool)data2;
            result1.Add(result2);
          }
          result0.Add(data1pair.Key, result1);
        }
        booleanArrayMap = result0;

      }

      // Retrieve data for stringArrayMap
      if (data.TryGetValue("stringArrayMap", out value))
      {
        Dictionary<string, List<string>> data0 = (Dictionary<string, List<string>>)value;
        Dictionary<string, IReadOnlyList<string>> result0 = new Dictionary<string, IReadOnlyList<string>>();
        foreach (KeyValuePair<string, List<string>> data1pair in data0)
        {
          List<string> data1 = data1pair.Value;
          List<string> result1 = new List<string>();
          foreach (string data2 in data1)
          {
            string result2;
            result2 = (string)data2;
            result1.Add(result2);
          }
          result0.Add(data1pair.Key, result1);
        }
        stringArrayMap = result0;

      }

      // Retrieve data for bytesArrayMap
      if (data.TryGetValue("bytesArrayMap", out value))
      {
        Dictionary<string, List<string>> data0 = (Dictionary<string, List<string>>)value;
        Dictionary<string, IReadOnlyList<string>> result0 = new Dictionary<string, IReadOnlyList<string>>();
        foreach (KeyValuePair<string, List<string>> data1pair in data0)
        {
          List<string> data1 = data1pair.Value;
          List<string> result1 = new List<string>();
          foreach (string data2 in data1)
          {
            string result2;
            result2 = (string)data2;
            result1.Add(result2);
          }
          result0.Add(data1pair.Key, result1);
        }
        bytesArrayMap = result0;

      }

      // Retrieve data for stringMapMap
      if (data.TryGetValue("stringMapMap", out value))
      {
        Dictionary<string, Dictionary<string, string>> data0 = (Dictionary<string, Dictionary<string, string>>)value;
        Dictionary<string, IReadOnlyDictionary<string, string>> result0 = new Dictionary<string, IReadOnlyDictionary<string, string>>();
        foreach (KeyValuePair<string, Dictionary<string, string>> data1pair in data0)
        {
          Dictionary<string, string> data1 = data1pair.Value;
          Dictionary<string, string> result1 = new Dictionary<string, string>();
          foreach (KeyValuePair<string, string> data2pair in data1)
          {
            string data2 = data2pair.Value;
            string result2;
            result2 = (string)data2;
            result1.Add(data2pair.Key, result2);
          }
          result0.Add(data1pair.Key, result1);
        }
        stringMapMap = result0;

      }

      // Retrieve data for testEnumMap
      if (data.TryGetValue("testEnumMap", out value))
      {
        Dictionary<string, string> data0 = (Dictionary<string, string>)value;
        Dictionary<string, TestEnum> result0 = new Dictionary<string, TestEnum>();
        foreach (KeyValuePair<string, string> data1pair in data0)
        {
          string data1 = data1pair.Value;
          TestEnum result1;
          result1 = new TestEnum(data1);
          result0.Add(data1pair.Key, result1);
        }
        testEnumMap = result0;

      }

      // Retrieve data for enumInlineMap
      if (data.TryGetValue("enumInlineMap", out value))
      {
        Dictionary<string, string> data0 = (Dictionary<string, string>)value;
        Dictionary<string, EnumInMapTest> result0 = new Dictionary<string, EnumInMapTest>();
        foreach (KeyValuePair<string, string> data1pair in data0)
        {
          string data1 = data1pair.Value;
          EnumInMapTest result1;
          result1 = new EnumInMapTest(data1);
          result0.Add(data1pair.Key, result1);
        }
        enumInlineMap = result0;

      }

      // Retrieve data for recordMap
      if (data.TryGetValue("recordMap", out value))
      {
        Dictionary<string, Dictionary<string, object>> data0 = (Dictionary<string, Dictionary<string, object>>)value;
        Dictionary<string, SimpleRecord> result0 = new Dictionary<string, SimpleRecord>();
        foreach (KeyValuePair<string, Dictionary<string, object>> data1pair in data0)
        {
          Dictionary<string, object> data1 = data1pair.Value;
          SimpleRecord result1;
          result1 = new SimpleRecord(data1);
          result0.Add(data1pair.Key, result1);
        }
        recordMap = result0;

      }

      // Retrieve data for recordInlineMap
      if (data.TryGetValue("recordInlineMap", out value))
      {
        Dictionary<string, Dictionary<string, object>> data0 = (Dictionary<string, Dictionary<string, object>>)value;
        Dictionary<string, RecordInMapTest> result0 = new Dictionary<string, RecordInMapTest>();
        foreach (KeyValuePair<string, Dictionary<string, object>> data1pair in data0)
        {
          Dictionary<string, object> data1 = data1pair.Value;
          RecordInMapTest result1;
          result1 = new RecordInMapTest(data1);
          result0.Add(data1pair.Key, result1);
        }
        recordInlineMap = result0;

      }

      // Retrieve data for unionMap
      if (data.TryGetValue("unionMap", out value))
      {
        Dictionary<string, Dictionary<string, object>> data0 = (Dictionary<string, Dictionary<string, object>>)value;
        Dictionary<string, UnionMap> result0 = new Dictionary<string, UnionMap>();
        foreach (KeyValuePair<string, Dictionary<string, object>> data1pair in data0)
        {
          Dictionary<string, object> data1 = data1pair.Value;
          UnionMap result1;
          result1 = new UnionMap(data1);
          result0.Add(data1pair.Key, result1);
        }
        unionMap = result0;

      }

    }

    public MapTest(MapTestBuilder builder)
    {
      // Retrieve data for intMap
      if (builder.intMap != null)
      {
        intMap = (IReadOnlyDictionary<string, int>)builder.intMap;

      }
      else
      {
        throw new System.ArgumentNullException("Required field with no default must be included in builder: intMap");
      }
      // Retrieve data for longMap
      if (builder.longMap != null)
      {
        longMap = (IReadOnlyDictionary<string, long>)builder.longMap;

      }
      else
      {
        throw new System.ArgumentNullException("Required field with no default must be included in builder: longMap");
      }
      // Retrieve data for floatMap
      if (builder.floatMap != null)
      {
        floatMap = (IReadOnlyDictionary<string, float>)builder.floatMap;

      }
      else
      {
        throw new System.ArgumentNullException("Required field with no default must be included in builder: floatMap");
      }
      // Retrieve data for doubleMap
      if (builder.doubleMap != null)
      {
        doubleMap = (IReadOnlyDictionary<string, double>)builder.doubleMap;

      }
      else
      {
        throw new System.ArgumentNullException("Required field with no default must be included in builder: doubleMap");
      }
      // Retrieve data for booleanMap
      if (builder.booleanMap != null)
      {
        booleanMap = (IReadOnlyDictionary<string, bool>)builder.booleanMap;

      }
      else
      {
        throw new System.ArgumentNullException("Required field with no default must be included in builder: booleanMap");
      }
      // Retrieve data for stringMap
      if (builder.stringMap != null)
      {
        stringMap = (IReadOnlyDictionary<string, string>)builder.stringMap;

      }
      else
      {
        throw new System.ArgumentNullException("Required field with no default must be included in builder: stringMap");
      }
      // Retrieve data for bytesMap
      if (builder.bytesMap != null)
      {
        bytesMap = (IReadOnlyDictionary<string, string>)builder.bytesMap;

      }
      else
      {
        throw new System.ArgumentNullException("Required field with no default must be included in builder: bytesMap");
      }
      // Retrieve data for intArrayMap
      if (builder.intArrayMap != null)
      {
        intArrayMap = (IReadOnlyDictionary<string, IReadOnlyList<int>>)builder.intArrayMap;

      }
      else
      {
        throw new System.ArgumentNullException("Required field with no default must be included in builder: intArrayMap");
      }
      // Retrieve data for longArrayMap
      if (builder.longArrayMap != null)
      {
        longArrayMap = (IReadOnlyDictionary<string, IReadOnlyList<long>>)builder.longArrayMap;

      }
      else
      {
        throw new System.ArgumentNullException("Required field with no default must be included in builder: longArrayMap");
      }
      // Retrieve data for floatArrayMap
      if (builder.floatArrayMap != null)
      {
        floatArrayMap = (IReadOnlyDictionary<string, IReadOnlyList<float>>)builder.floatArrayMap;

      }
      else
      {
        throw new System.ArgumentNullException("Required field with no default must be included in builder: floatArrayMap");
      }
      // Retrieve data for doubleArrayMap
      if (builder.doubleArrayMap != null)
      {
        doubleArrayMap = (IReadOnlyDictionary<string, IReadOnlyList<double>>)builder.doubleArrayMap;

      }
      else
      {
        throw new System.ArgumentNullException("Required field with no default must be included in builder: doubleArrayMap");
      }
      // Retrieve data for booleanArrayMap
      if (builder.booleanArrayMap != null)
      {
        booleanArrayMap = (IReadOnlyDictionary<string, IReadOnlyList<bool>>)builder.booleanArrayMap;

      }
      else
      {
        throw new System.ArgumentNullException("Required field with no default must be included in builder: booleanArrayMap");
      }
      // Retrieve data for stringArrayMap
      if (builder.stringArrayMap != null)
      {
        stringArrayMap = (IReadOnlyDictionary<string, IReadOnlyList<string>>)builder.stringArrayMap;

      }
      else
      {
        throw new System.ArgumentNullException("Required field with no default must be included in builder: stringArrayMap");
      }
      // Retrieve data for bytesArrayMap
      if (builder.bytesArrayMap != null)
      {
        bytesArrayMap = (IReadOnlyDictionary<string, IReadOnlyList<string>>)builder.bytesArrayMap;

      }
      else
      {
        throw new System.ArgumentNullException("Required field with no default must be included in builder: bytesArrayMap");
      }
      // Retrieve data for stringMapMap
      if (builder.stringMapMap != null)
      {
        stringMapMap = (IReadOnlyDictionary<string, IReadOnlyDictionary<string, string>>)builder.stringMapMap;

      }
      else
      {
        throw new System.ArgumentNullException("Required field with no default must be included in builder: stringMapMap");
      }
      // Retrieve data for testEnumMap
      if (builder.testEnumMap != null)
      {
        testEnumMap = (IReadOnlyDictionary<string, TestEnum>)builder.testEnumMap;

      }
      else
      {
        throw new System.ArgumentNullException("Required field with no default must be included in builder: testEnumMap");
      }
      // Retrieve data for enumInlineMap
      if (builder.enumInlineMap != null)
      {
        enumInlineMap = (IReadOnlyDictionary<string, EnumInMapTest>)builder.enumInlineMap;

      }
      else
      {
        throw new System.ArgumentNullException("Required field with no default must be included in builder: enumInlineMap");
      }
      // Retrieve data for recordMap
      if (builder.recordMap != null)
      {
        recordMap = (IReadOnlyDictionary<string, SimpleRecord>)builder.recordMap;

      }
      else
      {
        throw new System.ArgumentNullException("Required field with no default must be included in builder: recordMap");
      }
      // Retrieve data for recordInlineMap
      if (builder.recordInlineMap != null)
      {
        recordInlineMap = (IReadOnlyDictionary<string, RecordInMapTest>)builder.recordInlineMap;

      }
      else
      {
        throw new System.ArgumentNullException("Required field with no default must be included in builder: recordInlineMap");
      }
      // Retrieve data for unionMap
      if (builder.unionMap != null)
      {
        unionMap = (IReadOnlyDictionary<string, UnionMap>)builder.unionMap;

      }
      else
      {
        throw new System.ArgumentNullException("Required field with no default must be included in builder: unionMap");
      }
    }

    public class UnionMap
    {
      public IReadOnlyList<int> asArray { get; }
      public SimpleRecord asSimpleRecord { get; }
      public TestEnum asTestEnum { get; }
      public string asString { get; }
      public IReadOnlyDictionary<string, string> asMap { get; }
      public int? asInt { get; }
      public Mode? dataMode { get; }
    
      public enum Mode
      {
        Array,
        SimpleRecord,
        TestEnum,
        String,
        Map,
        Int
      }
    
      public UnionMap(Dictionary<string, object> dataMap)
      {
        foreach (KeyValuePair<string, object> dataPair in dataMap)
        {
          if (dataPair.Key.Equals("Array"))
          {
            asArray = (IReadOnlyList<int>)dataPair.Value;
            dataMode = Mode.Array;
            break;
          }
          if (dataPair.Key.Equals("SimpleRecord"))
          {
            asSimpleRecord = (SimpleRecord)dataPair.Value;
            dataMode = Mode.SimpleRecord;
            break;
          }
          if (dataPair.Key.Equals("TestEnum"))
          {
            asTestEnum = (TestEnum)dataPair.Value;
            dataMode = Mode.TestEnum;
            break;
          }
          if (dataPair.Key.Equals("String"))
          {
            asString = (string)dataPair.Value;
            dataMode = Mode.String;
            break;
          }
          if (dataPair.Key.Equals("Map"))
          {
            asMap = (IReadOnlyDictionary<string, string>)dataPair.Value;
            dataMode = Mode.Map;
            break;
          }
          if (dataPair.Key.Equals("Int"))
          {
            asInt = (int)dataPair.Value;
            dataMode = Mode.Int;
            break;
          }
        }
        throw new System.ArgumentNullException("Unable to find argument of valid type in union constructor: UnionMap");
      }
    
    
      public UnionMap(IReadOnlyList<int> value)
      {
        asArray = value;
        dataMode = Mode.Array;
      }
    
      public UnionMap(SimpleRecord value)
      {
        asSimpleRecord = value;
        dataMode = Mode.SimpleRecord;
      }
    
      public UnionMap(TestEnum value)
      {
        asTestEnum = value;
        dataMode = Mode.TestEnum;
      }
    
      public UnionMap(string value)
      {
        asString = value;
        dataMode = Mode.String;
      }
    
      public UnionMap(IReadOnlyDictionary<string, string> value)
      {
        asMap = value;
        dataMode = Mode.Map;
      }
    
      public UnionMap(int value)
      {
        asInt = value;
        dataMode = Mode.Int;
      }
    }
  }

  public class MapTestBuilder
  {
    public Dictionary<string, int> intMap { get; set; }
    public Dictionary<string, long> longMap { get; set; }
    public Dictionary<string, float> floatMap { get; set; }
    public Dictionary<string, double> doubleMap { get; set; }
    public Dictionary<string, bool> booleanMap { get; set; }
    public Dictionary<string, string> stringMap { get; set; }
    public Dictionary<string, string> bytesMap { get; set; }
    public Dictionary<string, List<int>> intArrayMap { get; set; }
    public Dictionary<string, List<long>> longArrayMap { get; set; }
    public Dictionary<string, List<float>> floatArrayMap { get; set; }
    public Dictionary<string, List<double>> doubleArrayMap { get; set; }
    public Dictionary<string, List<bool>> booleanArrayMap { get; set; }
    public Dictionary<string, List<string>> stringArrayMap { get; set; }
    public Dictionary<string, List<string>> bytesArrayMap { get; set; }
    public Dictionary<string, Dictionary<string, string>> stringMapMap { get; set; }
    public Dictionary<string, TestEnum> testEnumMap { get; set; }
    public Dictionary<string, EnumInMapTest> enumInlineMap { get; set; }
    public Dictionary<string, SimpleRecord> recordMap { get; set; }
    public Dictionary<string, RecordInMapTest> recordInlineMap { get; set; }
    public Dictionary<string, UnionMap> unionMap { get; set; }

    public MapTest Build()
    {
      return new MapTest(this);
    }
  }
}