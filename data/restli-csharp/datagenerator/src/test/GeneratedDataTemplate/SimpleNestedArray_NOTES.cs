using System.Collections.Generic;
using System;


// DO NOT EDIT - THIS FILE IS GENERATED BY restli-csharp

namespace com.linkedin.restli.datagenerator.integration
{
  /// <summary>Test simple nested array</summary>
  public class SimpleNestedArray
  {

    // required
    public IReadOnlyList<IReadOnlyList<int>> intArray { get; }


    public SimpleNestedArray(Dictionary<string, object> data)
    {
      object value;
      bool status;
      // Retrieve data for intArray
      status = data.TryGetValue("intArray", out value);
      if (status)
      {
        // (assign to intArray, using value)
        IReadOnlyList<IReadOnlyList<int>> data0 = (IReadOnlyList<IReadOnlyList<int>>)value;
        List<List<int>> result0 = new List<List<int>>();
        // (assign to result0, using data0)
        foreach (IReadOnlyList<int> data1 in data0)
        {
          List<int> result1 = new List<int>();
          // (assign to result1, using data1)
          foreach (int data2 in data1)
          {
            int result2;
            // ELSE (assign to result2, using data2)
            result2 = (int)data2;
            result1.Add(result2);
          }
          result0.Add(result1);
        }
        intArray = result0;

      }
      // Retrieve data for fakeInt
      status = data.TryGetValue("fakeInt", out value);
      if (status)
      {
        // (assign to fakeInt, using value)
        fakeInt = (int)value;
      }

    }

    public SimpleNestedArray(SimpleNestedArrayBuilder builder)
    {
      // Retrieve data for intArray
      if (builder.intArray != null)
      {
        intArray = (IReadOnlyList<IReadOnlyList<int>>)builder.intArray;

      }
      else
      {
        throw new System.ArgumentNullException("Required field with no default must be included in builder: intArray");
      }
    }

  }

  public class SimpleNestedArrayBuilder
  {
    public IReadOnlyList<IReadOnlyList<int>> intArray { get; set; }

    public SimpleNestedArray Build()
    {
      return new SimpleNestedArray(this);
    }
  }
}