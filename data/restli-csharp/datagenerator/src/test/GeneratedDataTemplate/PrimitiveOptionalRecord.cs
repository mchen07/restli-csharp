using System.Collections.Generic;
using System;


// DO NOT EDIT - THIS FILE IS GENERATED BY restli-csharp

namespace PrimitiveOptionalRecord
{

    ///<summary>
///Contains fields of all supported primitive schema types
///Every field is optional
///</summary>
  public class PrimitiveOptionalRecord
  {
    ///<summary>I will make the doc look casual</summary>
    // optional, has default value
    public bool? BooleanField { get; }
    public bool HasBooleanField { get; }
    ///<summary>so that you know it is not codegen-ed</summary>
    // optional, has default value
    public int? IntField { get; }
    public bool HasIntField { get; }

    // optional
    public long? LongField { get; }

    ///<summary>intentionally not leave a doc for the previous field</summary>
    // optional, has default value
    public float? FloatField { get; }
    public bool HasFloatField { get; }

    // optional, has default value
    public double? DoubleField { get; }
    public bool HasDoubleField { get; }

    // optional
    public string StringField { get; }


    public PrimitiveOptionalRecord(Dictionary<string, object> data)
    {
      object value;
      bool status;
      // Retrieve data for BooleanField
      status = data.TryGetValue("BooleanField", out value);
      if (status)
      {
        HasBooleanField = true;
        BooleanField = (bool?)value;
      }
      else
      {
        BooleanField = false;
        HasBooleanField = false;
      }
      // Retrieve data for IntField
      status = data.TryGetValue("IntField", out value);
      if (status)
      {
        HasIntField = true;
        IntField = (int?)value;
      }
      else
      {
        IntField = 123;
        HasIntField = false;
      }
      // Retrieve data for LongField
      status = data.TryGetValue("LongField", out value);
      if (status)
      {

        LongField = (long?)value;
      }

      // Retrieve data for FloatField
      status = data.TryGetValue("FloatField", out value);
      if (status)
      {
        HasFloatField = true;
        FloatField = (float?)value;
      }
      else
      {
        FloatField = 23.4F;
        HasFloatField = false;
      }
      // Retrieve data for DoubleField
      status = data.TryGetValue("DoubleField", out value);
      if (status)
      {
        HasDoubleField = true;
        DoubleField = (double?)value;
      }
      else
      {
        DoubleField = 3.14159;
        HasDoubleField = false;
      }
      // Retrieve data for StringField
      status = data.TryGetValue("StringField", out value);
      if (status)
      {

        StringField = (string)value;
      }

    }

    public PrimitiveOptionalRecord(Builder builder)
    {
      // Retrieve data for BooleanField
      if (builder.BooleanField != null)
      {
        HasBooleanField = true;
        BooleanField = (bool?)builder.BooleanField;
      }
      else
      {
        BooleanField = false;
        HasBooleanField = false;
      }
      // Retrieve data for IntField
      if (builder.IntField != null)
      {
        HasIntField = true;
        IntField = (int?)builder.IntField;
      }
      else
      {
        IntField = 123;
        HasIntField = false;
      }
      // Retrieve data for LongField
      if (builder.LongField != null)
      {

        LongField = (long?)builder.LongField;
      }

      // Retrieve data for FloatField
      if (builder.FloatField != null)
      {
        HasFloatField = true;
        FloatField = (float?)builder.FloatField;
      }
      else
      {
        FloatField = 23.4F;
        HasFloatField = false;
      }
      // Retrieve data for DoubleField
      if (builder.DoubleField != null)
      {
        HasDoubleField = true;
        DoubleField = (double?)builder.DoubleField;
      }
      else
      {
        DoubleField = 3.14159;
        HasDoubleField = false;
      }
      // Retrieve data for StringField
      if (builder.StringField != null)
      {

        StringField = (string)builder.StringField;
      }

    }
  }

  public class Builder
  {
    public bool? BooleanField { get; set; }
    public int? IntField { get; set; }
    public long? LongField { get; set; }
    public float? FloatField { get; set; }
    public double? DoubleField { get; set; }
    public string StringField { get; set; }

    public PrimitiveOptionalRecord build()
    {
      return new PrimitiveOptionalRecord(this);
    }
  }
}