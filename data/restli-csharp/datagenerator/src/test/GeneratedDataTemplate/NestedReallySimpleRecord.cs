using System.Collections.Generic;
using System;


// DO NOT EDIT - THIS FILE IS GENERATED BY restli-csharp

namespace com.linkedin.restli.datagenerator.integration
{

    
  public class NestedReallySimpleRecord
  {

    // optional
    public SimpleRecord SimpleRecordValue { get; }


    // optional, has default value
    public IReadOnlyList<SimpleRecord> CollectionWithDefault { get; }
    public bool HasCollectionWithDefault { get; }

    // required
    public IReadOnlyList<IReadOnlyList<IReadOnlyList<SimpleRecord>>> Triple { get; }


    // optional
    public IReadOnlyDictionary<string, IReadOnlyDictionary<string, SimpleRecordProjection>> Dict { get; }


    // optional
    public IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<SimpleRecord>>> Mixed { get; }


    public NestedReallySimpleRecord(Dictionary<string, object> data)
    {
      object value;
      bool status;
      // Retrieve data for SimpleRecordValue
      status = data.TryGetValue("SimpleRecordValue", out value);
      if (status)
      {
        SimpleRecordValue = (SimpleRecord)value;

      }

      // Retrieve data for CollectionWithDefault
      status = data.TryGetValue("CollectionWithDefault", out value);
      if (status)
      {
        CollectionWithDefault = (IReadOnlyList<SimpleRecord>)value;
        HasCollectionWithDefault = true;
      }
      else
      {
        CollectionWithDefault = new IReadOnlyList<SimpleRecord>();
        HasCollectionWithDefault = false;
      }
      // Retrieve data for Triple
      status = data.TryGetValue("Triple", out value);
      if (status)
      {
        Triple = (IReadOnlyList<IReadOnlyList<IReadOnlyList<SimpleRecord>>>)value;

      }

      // Retrieve data for Dict
      status = data.TryGetValue("Dict", out value);
      if (status)
      {
        Dict = (IReadOnlyDictionary<string, IReadOnlyDictionary<string, SimpleRecordProjection>>)value;

      }

      // Retrieve data for Mixed
      status = data.TryGetValue("Mixed", out value);
      if (status)
      {
        Mixed = (IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<SimpleRecord>>>)value;

      }

    }

    public NestedReallySimpleRecord(Builder builder)
    {
      // Retrieve data for SimpleRecordValue
      if (builder.SimpleRecordValue != null)
      {
        SimpleRecordValue = (SimpleRecord)builder.SimpleRecordValue;

      }

      // Retrieve data for CollectionWithDefault
      if (builder.CollectionWithDefault != null)
      {
        CollectionWithDefault = (IReadOnlyList<SimpleRecord>)builder.CollectionWithDefault;
        HasCollectionWithDefault = true;
      }
      else
      {
        CollectionWithDefault = new IReadOnlyList<SimpleRecord>();
        HasCollectionWithDefault = false;
      }
      // Retrieve data for Triple
      if (builder.Triple != null)
      {
        Triple = (IReadOnlyList<IReadOnlyList<IReadOnlyList<SimpleRecord>>>)builder.Triple;

      }
      else
      {
        throw new System.ArgumentNullException("Required field with no default must be included in builder: Triple");
      }
      // Retrieve data for Dict
      if (builder.Dict != null)
      {
        Dict = (IReadOnlyDictionary<string, IReadOnlyDictionary<string, SimpleRecordProjection>>)builder.Dict;

      }

      // Retrieve data for Mixed
      if (builder.Mixed != null)
      {
        Mixed = (IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<SimpleRecord>>>)builder.Mixed;

      }

    }
  }

  public class Builder
  {
    public SimpleRecord SimpleRecordValue { get; set; }
    public IReadOnlyList<SimpleRecord> CollectionWithDefault { get; set; }
    public IReadOnlyList<IReadOnlyList<IReadOnlyList<SimpleRecord>>> Triple { get; set; }
    public IReadOnlyDictionary<string, IReadOnlyDictionary<string, SimpleRecordProjection>> Dict { get; set; }
    public IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<SimpleRecord>>> Mixed { get; set; }

    public NestedReallySimpleRecord Build()
    {
      return new NestedReallySimpleRecord(this);
    }
  }
}