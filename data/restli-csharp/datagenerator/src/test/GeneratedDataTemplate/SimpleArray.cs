using System.Collections.Generic;
using System;

// DO NOT EDIT - THIS FILE IS GENERATED BY restli-csharp
// Generated from com/linkedin/restli/datagenerator/integration/SimpleArray.pdsc

namespace com.linkedin.restli.datagenerator.integration
{
  /// <summary>Test simple arrays</summary>
  public class SimpleArray
  {

    // required
    public IReadOnlyList<int> intArray { get; }


    // required
    public IReadOnlyList<string> stringArray { get; }


    // required
    public IReadOnlyList<bool> booleanArray { get; }


    // required
    public IReadOnlyList<EnumInRecord> enumArray { get; }


    public SimpleArray(Dictionary<string, object> data)
    {
      object value;
      // Retrieve data for intArray
      if (data.TryGetValue("intArray", out value))
      {
        List<int> data0 = (List<int>)value;
        List<int> result0 = new List<int>();
        foreach (int data1 in data0)
        {
          int result1;
          result1 = (int)data1;
          result0.Add(result1);
        }
        intArray = result0;

      }

      // Retrieve data for stringArray
      if (data.TryGetValue("stringArray", out value))
      {
        List<string> data0 = (List<string>)value;
        List<string> result0 = new List<string>();
        foreach (string data1 in data0)
        {
          string result1;
          result1 = (string)data1;
          result0.Add(result1);
        }
        stringArray = result0;

      }

      // Retrieve data for booleanArray
      if (data.TryGetValue("booleanArray", out value))
      {
        List<bool> data0 = (List<bool>)value;
        List<bool> result0 = new List<bool>();
        foreach (bool data1 in data0)
        {
          bool result1;
          result1 = (bool)data1;
          result0.Add(result1);
        }
        booleanArray = result0;

      }

      // Retrieve data for enumArray
      if (data.TryGetValue("enumArray", out value))
      {
        List<string> data0 = (List<string>)value;
        List<EnumInRecord> result0 = new List<EnumInRecord>();
        foreach (string data1 in data0)
        {
          EnumInRecord result1;
          result1 = new EnumInRecord(data1);
          result0.Add(result1);
        }
        enumArray = result0;

      }

    }

    public SimpleArray(SimpleArrayBuilder builder)
    {
      // Retrieve data for intArray
      if (builder.intArray != null)
      {
        intArray = (IReadOnlyList<int>)builder.intArray;

      }
      else
      {
        throw new System.ArgumentNullException("Required field with no default must be included in builder: intArray");
      }
      // Retrieve data for stringArray
      if (builder.stringArray != null)
      {
        stringArray = (IReadOnlyList<string>)builder.stringArray;

      }
      else
      {
        throw new System.ArgumentNullException("Required field with no default must be included in builder: stringArray");
      }
      // Retrieve data for booleanArray
      if (builder.booleanArray != null)
      {
        booleanArray = (IReadOnlyList<bool>)builder.booleanArray;

      }
      else
      {
        throw new System.ArgumentNullException("Required field with no default must be included in builder: booleanArray");
      }
      // Retrieve data for enumArray
      if (builder.enumArray != null)
      {
        enumArray = (IReadOnlyList<EnumInRecord>)builder.enumArray;

      }
      else
      {
        throw new System.ArgumentNullException("Required field with no default must be included in builder: enumArray");
      }
    }

  }

  public class SimpleArrayBuilder
  {
    public IReadOnlyList<int> intArray { get; set; }
    public IReadOnlyList<string> stringArray { get; set; }
    public IReadOnlyList<bool> booleanArray { get; set; }
    public IReadOnlyList<EnumInRecord> enumArray { get; set; }

    public SimpleArray Build()
    {
      return new SimpleArray(this);
    }
  }
}