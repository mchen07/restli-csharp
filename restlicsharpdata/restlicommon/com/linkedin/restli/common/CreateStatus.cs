using System;
using System.Collections.Generic;
using System.Linq;

using restlicsharpdata.restlidata;

// DO NOT EDIT - THIS FILE IS GENERATED BY restli-csharp
// Generated from com\linkedin\restli\common\CreateStatus.pdsc

namespace com.linkedin.restli.common
{
  /// <summary>
/// A rest.li create status.
/// </summary>
  public class CreateStatus : RecordTemplate
  {

    public int status { get; }
    public bool hasStatus { get; }

    public string id { get; }
    public bool hasId { get; }

    public ErrorResponse error { get; }
    public bool hasError { get; }

    public CreateStatus(Dictionary<string, object> data)
    {
      object value;
      // Retrieve data for status
      if (data.TryGetValue("status", out value))
      {
        
status = Convert.ToInt32(value);
        hasStatus = true;
      }
      else
      {

        hasStatus = false;
      }
      // Retrieve data for id
      if (data.TryGetValue("id", out value))
      {
        
id = (string)value;
        hasId = true;
      }
      else
      {

        hasId = false;
      }
      // Retrieve data for error
      if (data.TryGetValue("error", out value))
      {
        
error = new ErrorResponse((Dictionary<string, object>)value);
        hasError = true;
      }
      else
      {

        hasError = false;
      }
    }

    public CreateStatus(CreateStatusBuilder builder)
    {
      // Retrieve data for status
      if (builder.status != null)
      {
        
status = (int)builder.status;
        hasStatus = true;
      }
      else
      {
        throw new ArgumentException("Required field with no default must be included in builder: status");

      }
      // Retrieve data for id
      if (builder.id != null)
      {
        
id = builder.id;
        hasId = true;
      }
      else
      {

        hasId = false;
      }
      // Retrieve data for error
      if (builder.error != null)
      {
        
error = builder.error;
        hasError = true;
      }
      else
      {

        hasError = false;
      }
    }

    public Dictionary<string, object> Data()
    {
      Dictionary<string, object> dataMap = new Dictionary<string, object>();
      if (hasStatus)
        dataMap.Add("status", status);
      if (hasId)
        dataMap.Add("id", id);
      if (hasError)
        dataMap.Add("error", error.Data());
      return dataMap;
    }

  }

  public class CreateStatusBuilder
  {
    public int? status { get; set; }
    public string id { get; set; }
    public ErrorResponse error { get; set; }

    public CreateStatus Build()
    {
      return new CreateStatus(this);
    }
  }
}
