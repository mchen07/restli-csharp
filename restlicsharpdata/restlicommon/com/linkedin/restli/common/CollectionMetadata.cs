using System;
using System.Collections.Generic;
using System.Linq;

using restlicsharpdata.restlidata;

// DO NOT EDIT - THIS FILE IS GENERATED BY restli-csharp
// Generated from com\linkedin\restli\common\CollectionMetadata.pdsc

namespace com.linkedin.restli.common
{
  /// <summary>
/// Metadata and pagination links for this collection
/// </summary>
  public class CollectionMetadata : RecordTemplate
  {
    // The start index of this collection
    public int start { get; }
    public bool hasStart { get; }
    // The number of elements in this collection segment
    public int count { get; }
    public bool hasCount { get; }
    // The total number of elements in the entire collection (not just this segment)
    public int total { get; }
    public bool hasTotal { get; }

    public IReadOnlyList<Link> links { get; }
    public bool hasLinks { get; }

    public CollectionMetadata(Dictionary<string, object> data)
    {
      object value;
      // Retrieve data for start
      if (data.TryGetValue("start", out value))
      {
        
start = Convert.ToInt32(value);
        hasStart = true;
      }
      else
      {

        hasStart = false;
      }
      // Retrieve data for count
      if (data.TryGetValue("count", out value))
      {
        
count = Convert.ToInt32(value);
        hasCount = true;
      }
      else
      {

        hasCount = false;
      }
      // Retrieve data for total
      if (data.TryGetValue("total", out value))
      {
        
total = Convert.ToInt32(value);
        hasTotal = true;
      }
      else
      {
        total = 0;
        hasTotal = false;
      }
      // Retrieve data for links
      if (data.TryGetValue("links", out value))
      {
        //if (value is List<Dictionary<string, object>>)
        //{
        //  List<Dictionary<string, object>> typeSafe = (List<Dictionary<string, object>>)value;
        //  links = (IReadOnlyList<Link>)(typeSafe.Select(_0 => new Link((Dictionary<string, object>)_0)).ToList());
        //}
        //else
        //{
          List<object> data0 = (List<object>)value;
          List<Link> result0 = new List<Link>();
          

foreach (Dictionary<string, object> data1 in data0)
{
  Link result1;
  
result1 = new Link((Dictionary<string, object>)data1);
  result0.Add(result1);
}
          links = result0;
        //}

        hasLinks = true;
      }
      else
      {

        hasLinks = false;
      }
    }

    public CollectionMetadata(CollectionMetadataBuilder builder)
    {
      // Retrieve data for start
      if (builder.start != null)
      {
        
start = (int)builder.start;
        hasStart = true;
      }
      else
      {
        throw new ArgumentException("Required field with no default must be included in builder: start");

      }
      // Retrieve data for count
      if (builder.count != null)
      {
        
count = (int)builder.count;
        hasCount = true;
      }
      else
      {
        throw new ArgumentException("Required field with no default must be included in builder: count");

      }
      // Retrieve data for total
      if (builder.total != null)
      {
        
total = (int)builder.total;
        hasTotal = true;
      }
      else
      {
        total = 0;
        hasTotal = false;
      }
      // Retrieve data for links
      if (builder.links != null)
      {
        List<Link> data0 = builder.links;
        List<Link> result0 = new List<Link>();
        

foreach (Link data1 in data0)
{
  Link result1;
  
result1 = data1;
  result0.Add(result1);
}
        links = result0;
        hasLinks = true;
      }
      else
      {
        throw new ArgumentException("Required field with no default must be included in builder: links");

      }
    }

    public Dictionary<string, object> Data()
    {
      Dictionary<string, object> dataMap = new Dictionary<string, object>();
      if (hasStart)
        dataMap.Add("start", start);
      if (hasCount)
        dataMap.Add("count", count);
      if (hasTotal)
        dataMap.Add("total", total);
      if (hasLinks)
        dataMap.Add("links", links.Select(_0 => _0.Data()).Cast<object>().ToList());
      return dataMap;
    }

  }

  public class CollectionMetadataBuilder
  {
    public int? start { get; set; }
    public int? count { get; set; }
    public int? total { get; set; }
    public List<Link> links { get; set; }

    public CollectionMetadata Build()
    {
      return new CollectionMetadata(this);
    }
  }
}
