using System;
using System.Collections.Generic;
using System.Linq;

using restlicsharpdata.restlidata;

// DO NOT EDIT - THIS FILE IS GENERATED BY restli-csharp
// Generated from com\linkedin\restli\common\ErrorResponse.pdsc

namespace com.linkedin.restli.common
{
  /// <summary>
/// A generic ErrorResponse
/// </summary>
  public class ErrorResponse : RecordTemplate
  {
    // The HTTP status code
    public int status { get; }
    public bool hasStatus { get; }
    // An service-specific error code (documented in prose)
    public int serviceErrorCode { get; }
    public bool hasServiceErrorCode { get; }
    // A human-readable explanation of the error
    public string message { get; }
    public bool hasMessage { get; }
    // The FQCN of the exception thrown by the server (included the case of a server fault)
    public string exceptionClass { get; }
    public bool hasExceptionClass { get; }
    // The full (??) stack trace (included the case of a server fault)
    public string stackTrace { get; }
    public bool hasStackTrace { get; }

    public ErrorDetails errorDetails { get; }
    public bool hasErrorDetails { get; }

    public ErrorResponse(Dictionary<string, object> data)
    {
      object value;
      // Retrieve data for status
      if (data.TryGetValue("status", out value))
      {
        
status = Convert.ToInt32(value);
        hasStatus = true;
      }
      else
      {

        hasStatus = false;
      }
      // Retrieve data for serviceErrorCode
      if (data.TryGetValue("serviceErrorCode", out value))
      {
        
serviceErrorCode = Convert.ToInt32(value);
        hasServiceErrorCode = true;
      }
      else
      {

        hasServiceErrorCode = false;
      }
      // Retrieve data for message
      if (data.TryGetValue("message", out value))
      {
        
message = (string)value;
        hasMessage = true;
      }
      else
      {

        hasMessage = false;
      }
      // Retrieve data for exceptionClass
      if (data.TryGetValue("exceptionClass", out value))
      {
        
exceptionClass = (string)value;
        hasExceptionClass = true;
      }
      else
      {

        hasExceptionClass = false;
      }
      // Retrieve data for stackTrace
      if (data.TryGetValue("stackTrace", out value))
      {
        
stackTrace = (string)value;
        hasStackTrace = true;
      }
      else
      {

        hasStackTrace = false;
      }
      // Retrieve data for errorDetails
      if (data.TryGetValue("errorDetails", out value))
      {
        
errorDetails = new ErrorDetails((Dictionary<string, object>)value);
        hasErrorDetails = true;
      }
      else
      {

        hasErrorDetails = false;
      }
    }

    public ErrorResponse(ErrorResponseBuilder builder)
    {
      // Retrieve data for status
      if (builder.status != null)
      {
        
status = (int)builder.status;
        hasStatus = true;
      }
      else
      {

        hasStatus = false;
      }
      // Retrieve data for serviceErrorCode
      if (builder.serviceErrorCode != null)
      {
        
serviceErrorCode = (int)builder.serviceErrorCode;
        hasServiceErrorCode = true;
      }
      else
      {

        hasServiceErrorCode = false;
      }
      // Retrieve data for message
      if (builder.message != null)
      {
        
message = builder.message;
        hasMessage = true;
      }
      else
      {

        hasMessage = false;
      }
      // Retrieve data for exceptionClass
      if (builder.exceptionClass != null)
      {
        
exceptionClass = builder.exceptionClass;
        hasExceptionClass = true;
      }
      else
      {

        hasExceptionClass = false;
      }
      // Retrieve data for stackTrace
      if (builder.stackTrace != null)
      {
        
stackTrace = builder.stackTrace;
        hasStackTrace = true;
      }
      else
      {

        hasStackTrace = false;
      }
      // Retrieve data for errorDetails
      if (builder.errorDetails != null)
      {
        
errorDetails = builder.errorDetails;
        hasErrorDetails = true;
      }
      else
      {

        hasErrorDetails = false;
      }
    }

    public override Dictionary<string, object> Data()
    {
      Dictionary<string, object> dataMap = new Dictionary<string, object>();
      if (hasStatus)
        dataMap.Add("status", status);
      if (hasServiceErrorCode)
        dataMap.Add("serviceErrorCode", serviceErrorCode);
      if (hasMessage)
        dataMap.Add("message", message);
      if (hasExceptionClass)
        dataMap.Add("exceptionClass", exceptionClass);
      if (hasStackTrace)
        dataMap.Add("stackTrace", stackTrace);
      if (hasErrorDetails)
        dataMap.Add("errorDetails", errorDetails.Data());
      return dataMap;
    }

  }

  public class ErrorResponseBuilder
  {
    public int? status { get; set; }
    public int? serviceErrorCode { get; set; }
    public string message { get; set; }
    public string exceptionClass { get; set; }
    public string stackTrace { get; set; }
    public ErrorDetails errorDetails { get; set; }

    public ErrorResponse Build()
    {
      return new ErrorResponse(this);
    }
  }
}
