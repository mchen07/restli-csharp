using System.Collections.Generic;
using System;
using restlicsharpdata.restlidata;

// DO NOT EDIT - THIS FILE IS GENERATED BY restli-csharp
// Generated from com/linkedin/restli/datagenerator/integration/ComplexRequiredRecord.pdsc

namespace com.linkedin.restli.datagenerator.integration
{
  /// <summary>
  /// Contains fields of all supported complex schema types
  /// Every field is required
  /// </summary>
  public class ComplexRequiredRecord : RecordTemplate
  {

    public TestEnum enumField { get; }
    public bool hasEnumField { get; }

    public PrimitiveUnion primitiveUnion { get; }
    public bool hasPrimitiveUnion { get; }

    public ComplexUnion complexUnion { get; }
    public bool hasComplexUnion { get; }

    public ComplexRequiredRecord(Dictionary<string, object> data)
    {
      object value;
      // Retrieve data for enumField
      if (data.TryGetValue("enumField", out value))
      {
        
        enumField = new TestEnum((string)value);
        hasEnumField = true;
      }
      else
      {
        enumField = new TestEnum("SYMBOL_2");
        hasEnumField = false;
      }
      // Retrieve data for primitiveUnion
      if (data.TryGetValue("primitiveUnion", out value))
      {
        
        primitiveUnion = new PrimitiveUnion((Dictionary<string, object>)value);
        hasPrimitiveUnion = true;
      }
      else
      {

        hasPrimitiveUnion = false;
      }
      // Retrieve data for complexUnion
      if (data.TryGetValue("complexUnion", out value))
      {
        
        complexUnion = new ComplexUnion((Dictionary<string, object>)value);
        hasComplexUnion = true;
      }
      else
      {

        hasComplexUnion = false;
      }
    }

    public ComplexRequiredRecord(ComplexRequiredRecordBuilder builder)
    {
      // Retrieve data for enumField
      if (builder.enumField != null)
      {
        
        enumField = builder.enumField;
        hasEnumField = true;
      }
      else
      {
        enumField = new TestEnum("SYMBOL_2");
        hasEnumField = false;
      }
      // Retrieve data for primitiveUnion
      if (builder.primitiveUnion != null)
      {
        
        primitiveUnion = builder.primitiveUnion;
        hasPrimitiveUnion = true;
      }
      else
      {
        throw new ArgumentException("Required field with no default must be included in builder: primitiveUnion");

      }
      // Retrieve data for complexUnion
      if (builder.complexUnion != null)
      {
        
        complexUnion = builder.complexUnion;
        hasComplexUnion = true;
      }
      else
      {
        throw new ArgumentException("Required field with no default must be included in builder: complexUnion");

      }
    }

    
    public class ComplexUnion : UnionTemplate
    {
      public ComplexRequiredRecord asComplexRequiredRecord { get; }
      public TestEnum asTestEnum { get; }
      public Member member { get; }
    
      public enum Member
      {
        ComplexRequiredRecord,
        TestEnum,
        UNKNOWN
      }
    
      public ComplexUnion(Dictionary<string, object> dataMap)
      {
        foreach (KeyValuePair<string, object> dataPair in dataMap)
        {
          if (dataPair.Key.Equals("com.linkedin.restli.datagenerator.integration.ComplexRequiredRecord"))
          {
            
            asComplexRequiredRecord = new ComplexRequiredRecord((Dictionary<string, object>)dataPair.Value);
            member = Member.ComplexRequiredRecord;
            return;
          }
          if (dataPair.Key.Equals("com.linkedin.restli.datagenerator.integration.TestEnum"))
          {
            
            asTestEnum = new TestEnum((string)dataPair.Value);
            member = Member.TestEnum;
            return;
          }
        }
        member = Member.UNKNOWN;
      }
    
    
      public ComplexUnion(ComplexRequiredRecord value)
      {
        asComplexRequiredRecord = value;
        member = Member.ComplexRequiredRecord;
      }
    
      public ComplexUnion(TestEnum value)
      {
        asTestEnum = value;
        member = Member.TestEnum;
      }
    }
    
    public class PrimitiveUnion : UnionTemplate
    {
      public string asString { get; }
      public int? asInt { get; }
      public Member member { get; }
    
      public enum Member
      {
        String,
        Int,
        UNKNOWN
      }
    
      public PrimitiveUnion(Dictionary<string, object> dataMap)
      {
        foreach (KeyValuePair<string, object> dataPair in dataMap)
        {
          if (dataPair.Key.Equals("string"))
          {
            
            asString = (string)dataPair.Value;
            member = Member.String;
            return;
          }
          if (dataPair.Key.Equals("int"))
          {
            
            asInt = (int)dataPair.Value;
            member = Member.Int;
            return;
          }
        }
        member = Member.UNKNOWN;
      }
    
    
      public PrimitiveUnion(string value)
      {
        asString = value;
        member = Member.String;
      }
    
      public PrimitiveUnion(int value)
      {
        asInt = value;
        member = Member.Int;
      }
    }
  }

  public class ComplexRequiredRecordBuilder
  {
    public TestEnum enumField { get; set; }
    public ComplexRequiredRecord.PrimitiveUnion primitiveUnion { get; set; }
    public ComplexRequiredRecord.ComplexUnion complexUnion { get; set; }

    public ComplexRequiredRecord Build()
    {
      return new ComplexRequiredRecord(this);
    }
  }
}